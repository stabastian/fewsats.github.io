{"version":3,"file":"static/webpack/static/development/pages/position-size-calculator.js.bd272bf932323d9323d6.hot-update.js","sources":["webpack:///./pages/position-size-calculator.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Big from 'big.js'\nimport clsx from 'clsx'\nimport Main from '../layouts/main'\nimport CalculatorRow from '../components/calculator-row'\nimport Select from '../components/select'\nimport { getETHPrice, get, set, unset } from '../utils'\n\nconst LS_KEY = 'bitmex_calculator'\n\nconst pairs = [\n  { key: 'XBTUSD', value: 'XBTUSD (BitMEX contracts)' },\n  { key: 'ETHUSD', value: 'ETHUSD (BitMEX perpetual contracts)' },\n  { key: 'ALTS', value: 'Alt pairs (BitMEX, Binance, etc...)' }\n]\nconst STORAGE_VERSION = 4\nconst defaultFormState = {\n  capital: 1,\n  entry: 8000,\n  stop: 7000,\n  target: 9000,\n  risk: 5,\n  ethPrice: 300\n}\n\nexport default class PosistionSizeCalculator extends Component {\n  state = {\n    ready: false,\n    storageVersion: STORAGE_VERSION,\n    pair: 'ALTS',\n    form: defaultFormState\n  }\n\n  handleInputChange = async e => {\n    const name = e.target.name\n    const value = e.target.value\n    if (e.target.name === 'pair') {\n      this.setState(\n        {\n          pair: e.target.value\n        },\n        () => {\n          set(`${LS_KEY}_pair`, this.state.pair)\n          const storedFormState = get(`${LS_KEY}_${this.state.pair}`)\n          this.setState({\n            form: storedFormState || defaultFormState\n          })\n        }\n      )\n      if (value === 'ETHUSD') {\n        const ethPrice = await getETHPrice()\n        if (ethPrice) {\n          this.setState(\n            state => {\n              return {\n                ...state,\n                form: { ...state.form, ...{ ethPrice } }\n              }\n            },\n            () => {\n              set(`${LS_KEY}_${this.state.pair}`, this.state.form)\n            }\n          )\n        }\n      }\n      return\n    }\n    this.setState(\n      state => {\n        return {\n          ...state,\n          form: { ...state.form, ...{ [name]: value } }\n        }\n      },\n      () => {\n        set(`${LS_KEY}_${this.state.pair}`, this.state.form)\n        set(`${LS_KEY}_pair`, this.state.pair)\n        set(`${LS_KEY}_storageVersion`, this.state.storageVersion)\n      }\n    )\n  }\n\n  async componentDidMount() {\n    const storedPair = get(`${LS_KEY}_pair`) || 'XBTUSD'\n    const storageVersion = get(`${LS_KEY}_storageVersion`)\n    const storedFormState = get(`${LS_KEY}_${storedPair}`)\n    if (storageVersion !== this.state.storageVersion) {\n      unset(`${LS_KEY}_XBTUSD`)\n      unset(`${LS_KEY}_ETHUSD`)\n      unset(`${LS_KEY}_ALTS`)\n    }\n    this.setState({\n      form:\n        storedFormState && storageVersion === this.state.storageVersion\n          ? storedFormState\n          : defaultFormState,\n      pair: storedPair,\n      ready: true\n    })\n    const ethPrice = await getETHPrice()\n    if (ethPrice) {\n      this.setState(\n        state => {\n          return {\n            ...state,\n            form: { ...state.form, ...{ ethPrice } }\n          }\n        },\n        () => {\n          set(`${LS_KEY}_${this.state.pair}`, this.state.form)\n        }\n      )\n    }\n  }\n\n  compute() {\n    const result = {\n      riskAmount: 0,\n      distanceToStop: 0,\n      positionSizeBTC: 0,\n      positionSize: 0,\n      riskReward: 0,\n      contractValue: 0,\n      isLong: false\n    }\n    try {\n      const { form, pair } = this.state\n      const { capital, entry, stop, target, risk, ethPrice } = form\n      const isLong = new Big(target).gt(new Big(entry))\n      const riskAmount = new Big(capital)\n        .times(new Big(risk).div(100))\n        .toFixed(8)\n      const distanceToStop = new Big(stop)\n        .div(new Big(entry))\n        .minus(1)\n        .times(isLong ? -100 : 100)\n        .toFixed(3)\n      const positionSizeBTC = new Big(riskAmount)\n        .div(new Big(distanceToStop))\n        .times(100)\n        .toFixed(8)\n      // prettier-ignore\n      const riskReward = isLong\n        ? new Big(target).minus(new Big(entry)).div(new Big(new Big(entry).minus(new Big(stop)))).toFixed(2)\n        : new Big(entry).minus(new Big(target)).div(new Big(new Big(stop).minus(new Big(entry)))).toFixed(2)\n\n      if (pair === 'ETHUSD') {\n        // prettier-ignore\n        const contractValue = new Big(ethPrice).times(0.000001).toFixed(8)\n        result.contractValue = contractValue\n        // prettier-ignore\n        result.positionSize = new Big(riskAmount).div(contractValue).div(distanceToStop).times(100).toFixed(0)\n      } else if (pair === 'ALTS') {\n        // prettier-ignore\n        result.positionSize = new Big(positionSizeBTC).div(entry).toFixed(2)\n      } else if (pair === 'XBTUSD') {\n        // prettier-ignore\n        result.positionSize = new Big(entry).times(new Big(positionSizeBTC)).toFixed(0)\n      }\n\n      result.isLong = isLong\n      result.riskReward = riskReward\n      result.positionSizeBTC = positionSizeBTC\n      result.gain = new Big(riskReward)\n        .times(new Big(positionSizeBTC))\n        .toFixed(8)\n      result.riskAmount = riskAmount\n      result.distanceToStop = distanceToStop\n      return result\n    } catch (err) {\n      console.error('ouch!', err.message)\n      return result\n    }\n  }\n\n  render() {\n    const { ready, form, pair } = this.state\n    const { capital, entry, stop, target, risk, ethPrice } = form\n\n    const {\n      riskAmount,\n      contractValue,\n      distanceToStop,\n      positionSizeBTC,\n      gain,\n      positionSize,\n      riskReward,\n      isLong\n    } = this.compute()\n    return (\n      <Main\n        title='BitMEX and Binance Position Size Calculator'\n        description='Position Size Calculator for Bitcoin and Altcoins'>\n        <div className={clsx({ 'opacity-100': ready, 'opacity-0': !ready })}>\n          <h1 className='text-3xl text-left'>Position size calculator</h1>\n          <div>\n            <div className='mt-8'>\n              <Select\n                name='pair'\n                value={pair}\n                onChange={this.handleInputChange}>\n                {pairs.map(el => (\n                  <option key={el.key} value={el.key}>\n                    {el.value}\n                  </option>\n                ))}\n              </Select>\n            </div>\n            <div className='mt-4'>\n              <table\n                className={clsx(\n                  { 'border-green': isLong },\n                  { 'border-red': !isLong },\n                  'border-l-2 shadow-xl table-fixed w-full mt-2'\n                )}>\n                <tbody>\n                  <CalculatorRow\n                    label='Account Balance'\n                    name='capital'\n                    value={capital}\n                    onChange={this.handleInputChange}\n                    tip='This is your total account balance.'\n                  />\n                  <CalculatorRow\n                    label='Risk (%)'\n                    name='risk'\n                    value={risk}\n                    onChange={this.handleInputChange}\n                    tip='Percentage of acceptable risk.'\n                  />\n                  {pair === 'ETHUSD' && (\n                    <>\n                      <CalculatorRow\n                        label='ETH price ($)'\n                        name='ethPrice'\n                        value={ethPrice}\n                        onChange={this.handleInputChange}\n                        tip='Spot ETH price ($)'\n                      />\n                      <CalculatorRow\n                        label='Contract Value'\n                        value={contractValue}\n                        readOnly\n                        tip='ETH/USD perpetual contract value.'\n                      />\n                    </>\n                  )}\n                  <CalculatorRow\n                    label='Entry price'\n                    name='entry'\n                    value={entry}\n                    onChange={this.handleInputChange}\n                    tip='Position entry price.'\n                  />\n                  <CalculatorRow\n                    label='Stop-Loss Price'\n                    name='stop'\n                    value={stop}\n                    onChange={this.handleInputChange}\n                    tip='Stop-Loss price.'\n                  />\n                  <CalculatorRow\n                    label='Take Profit Price'\n                    name='target'\n                    value={target}\n                    onChange={this.handleInputChange}\n                    tip='Take Profit price.'\n                  />\n                  <CalculatorRow\n                    label='Total Risk in BTC'\n                    value={riskAmount}\n                    readOnly\n                    tip='Maximum loss in case the Stop-Loss gets hit.'\n                  />\n                  <CalculatorRow\n                    label='Distance to Stop-Loss (%)'\n                    value={distanceToStop}\n                    readOnly\n                    tip={\n                      <div>\n                        <div>Difference between Entry price and Stop-Loss.</div>\n                        <div>Expressed in percentage.</div>\n                      </div>\n                    }\n                  />\n                  <CalculatorRow\n                    label='Position Size in BTC'\n                    value={positionSizeBTC}\n                    readOnly\n                    tip={\n                      <div>\n                        <div>Position size expressed in BTC.</div>\n                        <div className='mt-1'>\n                          Calculated with the following formula:\n                        </div>\n                        <div className='underline'>\n                          Position Size = Risk Amount/Distance to Stop\n                        </div>\n                        <div className='mt-1'>\n                          Assuming an account of 1 BTC.\n                        </div>\n                        <div>A risk of 5% per trade.</div>\n                        <div>\n                          A 10% distance from the entry to the Stop-Loss.\n                        </div>\n                        <div className='underline'>\n                          Position Size = (1 BTC x 0.05)/0.1 = 0.5 BTC\n                        </div>\n                      </div>\n                    }\n                  />\n                  <CalculatorRow\n                    label='Position Size'\n                    value={positionSize}\n                    variant={isLong ? 'long' : 'short'}\n                    readOnly\n                    tip={\n                      <div>\n                        <div>Position size expressed in USD or $ALT.</div>\n                        <div>\n                          On BitMEX it corresponds to the amount of contracts to\n                          buy.\n                        </div>\n                        <div>\n                          For $ALTS it corresponds to the amount to buy.\n                        </div>\n                        <div className='mt-1'>\n                          Calculated with the following formula:\n                        </div>\n                        <div className='underline'>\n                          Position Size = Entry price * Position Size in BTC\n                        </div>\n                      </div>\n                    }\n                  />\n                  <CalculatorRow\n                    label='Risk Reward Ratio'\n                    value={riskReward}\n                    readOnly\n                    tip='Risk/Reward Ratio.'\n                  />\n                  <CalculatorRow\n                    label='Potential Gain'\n                    value={gain}\n                    readOnly\n                    tip='Realised gain in case of Take Profit.'\n                  />\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </Main>\n    )\n  }\n}\n"],"mappings":"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","sourceRoot":""}